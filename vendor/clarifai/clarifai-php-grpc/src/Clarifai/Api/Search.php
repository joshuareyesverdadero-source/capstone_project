<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * This is the new Search object used in saved searches.
 *
 * Generated from protobuf message <code>clarifai.api.Search</code>
 */
class Search extends \Google\Protobuf\Internal\Message
{
    /**
     * Search query.
     *
     * Generated from protobuf field <code>.clarifai.api.Query query = 1;</code>
     */
    protected $query = null;
    /**
     * Customer facing, external ID for search to be saved. Provided by the user, e.g. "saved-search-1.
     * It is unique per application.
     *
     * Generated from protobuf field <code>string id = 2;</code>
     */
    protected $id = '';
    /**
     * Application that owns this saved search.
     *
     * Generated from protobuf field <code>string application_id = 3;</code>
     */
    protected $application_id = '';
    /**
     * Human readable display name of the saved search.
     *
     * Generated from protobuf field <code>string name = 4;</code>
     */
    protected $name = '';
    /**
     * "As of" timestamp, indicating a time in the past as of which we want to
     * retrieve the annotations satisfying the query.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp as_of = 5;</code>
     */
    protected $as_of = null;
    /**
     * Git hash of the code that ran the filter.
     *
     * Generated from protobuf field <code>string git_hash = 6;</code>
     */
    protected $git_hash = '';
    /**
     * When the saved search was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 7;</code>
     */
    protected $created_at = null;
    /**
     * When the saved search was updated.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp modified_at = 8;</code>
     */
    protected $modified_at = null;
    /**
     * The search algorithm to be used.
     * Options are are 'nearest_neighbor', 'brute_force', and 'avg_concept_brute_force'
     * The last two perform a brute force search visual search instead of a more scalable distributed
     * nearest neighbor search and should be used by advanced users only.
     * If not specified we default to nearest neighbor
     *
     * Generated from protobuf field <code>string algorithm = 9;</code>
     */
    protected $algorithm = '';
    /**
     * If true, save this search, and exit without executing the search.
     * If false execute the query
     *
     * Generated from protobuf field <code>bool save = 10;</code>
     */
    protected $save = false;
    /**
     * Minimum value of confidence threshold score in result.
     * Defaults to 0.0 which means we won't do any thresholding as all probabilities will
     * likely be > 0.0.
     *
     * Generated from protobuf field <code>float min_value = 11;</code>
     */
    protected $min_value = 0.0;
    /**
     * The visibility field represents whether this message is privately/publicly visible.
     * To be visible to the public the App that contains it AND the User that contains the App must
     * also be publicly visible.
     *
     * Generated from protobuf field <code>.clarifai.api.Visibility visibility = 12;</code>
     */
    protected $visibility = null;
    /**
     * Generated from protobuf field <code>.clarifai.api.Search.Metric metric = 13;</code>
     */
    protected $metric = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Clarifai\Api\Query $query
     *           Search query.
     *     @type string $id
     *           Customer facing, external ID for search to be saved. Provided by the user, e.g. "saved-search-1.
     *           It is unique per application.
     *     @type string $application_id
     *           Application that owns this saved search.
     *     @type string $name
     *           Human readable display name of the saved search.
     *     @type \Google\Protobuf\Timestamp $as_of
     *           "As of" timestamp, indicating a time in the past as of which we want to
     *           retrieve the annotations satisfying the query.
     *     @type string $git_hash
     *           Git hash of the code that ran the filter.
     *     @type \Google\Protobuf\Timestamp $created_at
     *           When the saved search was created.
     *     @type \Google\Protobuf\Timestamp $modified_at
     *           When the saved search was updated.
     *     @type string $algorithm
     *           The search algorithm to be used.
     *           Options are are 'nearest_neighbor', 'brute_force', and 'avg_concept_brute_force'
     *           The last two perform a brute force search visual search instead of a more scalable distributed
     *           nearest neighbor search and should be used by advanced users only.
     *           If not specified we default to nearest neighbor
     *     @type bool $save
     *           If true, save this search, and exit without executing the search.
     *           If false execute the query
     *     @type float $min_value
     *           Minimum value of confidence threshold score in result.
     *           Defaults to 0.0 which means we won't do any thresholding as all probabilities will
     *           likely be > 0.0.
     *     @type \Clarifai\Api\Visibility $visibility
     *           The visibility field represents whether this message is privately/publicly visible.
     *           To be visible to the public the App that contains it AND the User that contains the App must
     *           also be publicly visible.
     *     @type int $metric
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Clarifai\Api\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * Search query.
     *
     * Generated from protobuf field <code>.clarifai.api.Query query = 1;</code>
     * @return \Clarifai\Api\Query|null
     */
    public function getQuery()
    {
        return $this->query;
    }

    public function hasQuery()
    {
        return isset($this->query);
    }

    public function clearQuery()
    {
        unset($this->query);
    }

    /**
     * Search query.
     *
     * Generated from protobuf field <code>.clarifai.api.Query query = 1;</code>
     * @param \Clarifai\Api\Query $var
     * @return $this
     */
    public function setQuery($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Query::class);
        $this->query = $var;

        return $this;
    }

    /**
     * Customer facing, external ID for search to be saved. Provided by the user, e.g. "saved-search-1.
     * It is unique per application.
     *
     * Generated from protobuf field <code>string id = 2;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Customer facing, external ID for search to be saved. Provided by the user, e.g. "saved-search-1.
     * It is unique per application.
     *
     * Generated from protobuf field <code>string id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * Application that owns this saved search.
     *
     * Generated from protobuf field <code>string application_id = 3;</code>
     * @return string
     */
    public function getApplicationId()
    {
        return $this->application_id;
    }

    /**
     * Application that owns this saved search.
     *
     * Generated from protobuf field <code>string application_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setApplicationId($var)
    {
        GPBUtil::checkString($var, True);
        $this->application_id = $var;

        return $this;
    }

    /**
     * Human readable display name of the saved search.
     *
     * Generated from protobuf field <code>string name = 4;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Human readable display name of the saved search.
     *
     * Generated from protobuf field <code>string name = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * "As of" timestamp, indicating a time in the past as of which we want to
     * retrieve the annotations satisfying the query.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp as_of = 5;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getAsOf()
    {
        return $this->as_of;
    }

    public function hasAsOf()
    {
        return isset($this->as_of);
    }

    public function clearAsOf()
    {
        unset($this->as_of);
    }

    /**
     * "As of" timestamp, indicating a time in the past as of which we want to
     * retrieve the annotations satisfying the query.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp as_of = 5;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setAsOf($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->as_of = $var;

        return $this;
    }

    /**
     * Git hash of the code that ran the filter.
     *
     * Generated from protobuf field <code>string git_hash = 6;</code>
     * @return string
     */
    public function getGitHash()
    {
        return $this->git_hash;
    }

    /**
     * Git hash of the code that ran the filter.
     *
     * Generated from protobuf field <code>string git_hash = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setGitHash($var)
    {
        GPBUtil::checkString($var, True);
        $this->git_hash = $var;

        return $this;
    }

    /**
     * When the saved search was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 7;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    public function hasCreatedAt()
    {
        return isset($this->created_at);
    }

    public function clearCreatedAt()
    {
        unset($this->created_at);
    }

    /**
     * When the saved search was created.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 7;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreatedAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->created_at = $var;

        return $this;
    }

    /**
     * When the saved search was updated.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp modified_at = 8;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getModifiedAt()
    {
        return $this->modified_at;
    }

    public function hasModifiedAt()
    {
        return isset($this->modified_at);
    }

    public function clearModifiedAt()
    {
        unset($this->modified_at);
    }

    /**
     * When the saved search was updated.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp modified_at = 8;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setModifiedAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->modified_at = $var;

        return $this;
    }

    /**
     * The search algorithm to be used.
     * Options are are 'nearest_neighbor', 'brute_force', and 'avg_concept_brute_force'
     * The last two perform a brute force search visual search instead of a more scalable distributed
     * nearest neighbor search and should be used by advanced users only.
     * If not specified we default to nearest neighbor
     *
     * Generated from protobuf field <code>string algorithm = 9;</code>
     * @return string
     */
    public function getAlgorithm()
    {
        return $this->algorithm;
    }

    /**
     * The search algorithm to be used.
     * Options are are 'nearest_neighbor', 'brute_force', and 'avg_concept_brute_force'
     * The last two perform a brute force search visual search instead of a more scalable distributed
     * nearest neighbor search and should be used by advanced users only.
     * If not specified we default to nearest neighbor
     *
     * Generated from protobuf field <code>string algorithm = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setAlgorithm($var)
    {
        GPBUtil::checkString($var, True);
        $this->algorithm = $var;

        return $this;
    }

    /**
     * If true, save this search, and exit without executing the search.
     * If false execute the query
     *
     * Generated from protobuf field <code>bool save = 10;</code>
     * @return bool
     */
    public function getSave()
    {
        return $this->save;
    }

    /**
     * If true, save this search, and exit without executing the search.
     * If false execute the query
     *
     * Generated from protobuf field <code>bool save = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setSave($var)
    {
        GPBUtil::checkBool($var);
        $this->save = $var;

        return $this;
    }

    /**
     * Minimum value of confidence threshold score in result.
     * Defaults to 0.0 which means we won't do any thresholding as all probabilities will
     * likely be > 0.0.
     *
     * Generated from protobuf field <code>float min_value = 11;</code>
     * @return float
     */
    public function getMinValue()
    {
        return $this->min_value;
    }

    /**
     * Minimum value of confidence threshold score in result.
     * Defaults to 0.0 which means we won't do any thresholding as all probabilities will
     * likely be > 0.0.
     *
     * Generated from protobuf field <code>float min_value = 11;</code>
     * @param float $var
     * @return $this
     */
    public function setMinValue($var)
    {
        GPBUtil::checkFloat($var);
        $this->min_value = $var;

        return $this;
    }

    /**
     * The visibility field represents whether this message is privately/publicly visible.
     * To be visible to the public the App that contains it AND the User that contains the App must
     * also be publicly visible.
     *
     * Generated from protobuf field <code>.clarifai.api.Visibility visibility = 12;</code>
     * @return \Clarifai\Api\Visibility|null
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    public function hasVisibility()
    {
        return isset($this->visibility);
    }

    public function clearVisibility()
    {
        unset($this->visibility);
    }

    /**
     * The visibility field represents whether this message is privately/publicly visible.
     * To be visible to the public the App that contains it AND the User that contains the App must
     * also be publicly visible.
     *
     * Generated from protobuf field <code>.clarifai.api.Visibility visibility = 12;</code>
     * @param \Clarifai\Api\Visibility $var
     * @return $this
     */
    public function setVisibility($var)
    {
        GPBUtil::checkMessage($var, \Clarifai\Api\Visibility::class);
        $this->visibility = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Search.Metric metric = 13;</code>
     * @return int
     */
    public function getMetric()
    {
        return $this->metric;
    }

    /**
     * Generated from protobuf field <code>.clarifai.api.Search.Metric metric = 13;</code>
     * @param int $var
     * @return $this
     */
    public function setMetric($var)
    {
        GPBUtil::checkEnum($var, \Clarifai\Api\Search\Metric::class);
        $this->metric = $var;

        return $this;
    }

}

