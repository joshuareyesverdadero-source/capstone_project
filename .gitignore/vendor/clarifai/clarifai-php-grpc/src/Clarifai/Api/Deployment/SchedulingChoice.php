<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/api/resources.proto

namespace Clarifai\Api\Deployment;

use UnexpectedValueException;

/**
 * In some scenarios it may not be obvous how we should schedule a resource to underlying nodes
 * within the nodepool(s) above. The SchedulerChoice allows us to specify how to decide which
 * nodepool to use when there are multiple nodepools and how to decide which type of node
 * within a nodepool if there are multiple types.
 * If here are multiple nondepools then a decision on which to use comes into play
 * if it is not specified in the prediction request.
 * Even with a single nodepool a choice may come up such as when a resource that needs scheduling
 * has not specified the accelerator types it supports and the nodepool has multiple types.
 *
 * Protobuf type <code>clarifai.api.Deployment.SchedulingChoice</code>
 */
class SchedulingChoice
{
    /**
     * Generated from protobuf enum <code>UNKNOWN_SCHEDULING_CHOICE = 0;</code>
     */
    const UNKNOWN_SCHEDULING_CHOICE = 0;
    /**
     * fail if there is any ambiguity.
     *
     * Generated from protobuf enum <code>FAIL = 1;</code>
     */
    const FAIL = 1;
    /**
     * randomly pick amongst the nodepools/nodes to assign.
     *
     * Generated from protobuf enum <code>RANDOM = 2;</code>
     */
    const RANDOM = 2;
    /**
     * choose the compute that is cheaper
     *
     * Generated from protobuf enum <code>PRICE = 3;</code>
     */
    const PRICE = 3;
    /**
     * schedule to the fastest known iption.
     *
     * Generated from protobuf enum <code>PERFORMANCE = 4;</code>
     */
    const PERFORMANCE = 4;
    /**
     * optimize based on network latency.
     *
     * Generated from protobuf enum <code>NETWORK = 5;</code>
     */
    const NETWORK = 5;
    /**
     * send to the least used nodepool based on it's capacity.
     *
     * Generated from protobuf enum <code>UTILIZATION = 6;</code>
     */
    const UTILIZATION = 6;
    /**
     * choose spot instances over on-demand
     *
     * Generated from protobuf enum <code>PREFER_SPOT = 7;</code>
     */
    const PREFER_SPOT = 7;
    /**
     * choose on-demand instances over spot.
     *
     * Generated from protobuf enum <code>PREFER_ONDEMAND = 8;</code>
     */
    const PREFER_ONDEMAND = 8;

    private static $valueToName = [
        self::UNKNOWN_SCHEDULING_CHOICE => 'UNKNOWN_SCHEDULING_CHOICE',
        self::FAIL => 'FAIL',
        self::RANDOM => 'RANDOM',
        self::PRICE => 'PRICE',
        self::PERFORMANCE => 'PERFORMANCE',
        self::NETWORK => 'NETWORK',
        self::UTILIZATION => 'UTILIZATION',
        self::PREFER_SPOT => 'PREFER_SPOT',
        self::PREFER_ONDEMAND => 'PREFER_ONDEMAND',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SchedulingChoice::class, \Clarifai\Api\Deployment_SchedulingChoice::class);

