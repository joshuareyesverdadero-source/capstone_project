<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/clarifai/auth/types/types.proto

namespace Clarifai\Auth\Types;

use UnexpectedValueException;

/**
 * Authorization type for endpoints.
 *
 * Protobuf type <code>clarifai.auth.types.AuthType</code>
 */
class AuthType
{
    /**
     * introduce undef so that the zero (default/unset) value of the enum is not a real
     * permission.  undef is only present for this purpose and should not be used
     * to indicate any "real" value.
     *
     * Generated from protobuf enum <code>undef = 0;</code>
     */
    const undef = 0;
    /**
     * No authorization need for this endpoint.
     *
     * Generated from protobuf enum <code>NoAuth = 1;</code>
     */
    const NoAuth = 1;
    /**
     * This authorization requires API keys (both app-spceific keys and personal access tokens).
     * The endpoints that use this AuthType may also include a list of
     * clarifai.auth.utils.cl_depending_scopes.
     *
     * Generated from protobuf enum <code>KeyAuth = 2;</code>
     */
    const KeyAuth = 2;
    /**
     * This uses a session token from your web browser. This is reserved for users/account level APIs
     * that are only needed in a browser.
     *
     * Generated from protobuf enum <code>SessionTokenAuth = 3;</code>
     */
    const SessionTokenAuth = 3;
    /**
     * This uses a special token for admin access to the APIs.
     *
     * Generated from protobuf enum <code>AdminAuth = 4;</code>
     */
    const AdminAuth = 4;
    /**
     * This authorization requires personal access tokens. This is used for endpoints such as
     * /users/{user_id}/apps which are not specific. An app-specific API key will not work
     * when PATAuth is used.
     *
     * Generated from protobuf enum <code>PATAuth = 5;</code>
     */
    const PATAuth = 5;

    private static $valueToName = [
        self::undef => 'undef',
        self::NoAuth => 'NoAuth',
        self::KeyAuth => 'KeyAuth',
        self::SessionTokenAuth => 'SessionTokenAuth',
        self::AdminAuth => 'AdminAuth',
        self::PATAuth => 'PATAuth',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

